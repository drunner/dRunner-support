#!/bin/bash

#------------------------------------------------------------------------------------

# install_createlaunchscript
function install_createlaunchscript {
   local SCRIPTPATH="/home/${USER}/bin/${SERVICENAME}"
   cat <<EOF >"$SCRIPTPATH"
#!/bin/bash
drunner servicecmd ${SERVICENAME} "\$@"
EOF
   chmod a+x "$SCRIPTPATH"
}

#------------------------------------------------------------------------------------

# install_createVolumes
function install_createVolumes {
   # create the necessary volume containers.
   local DNAME="dr-install-volcreate"
   
   if [ -v VOLUMES ]; then
      for i in "${!DOCKERVOLS[@]}"; do      
         VOLNAME="${DOCKERVOLS[i]}"
         VOLPATH="${VOLUMES[i]}"

         if volexists "$VOLNAME" ; then 
            echo "A docker volume exists for: $VOLNAME. Reusing it.";
         else
            docker volume create --name="$DNAME" >/dev/null
            # set permissions on config volume
            docker run --name="$DNAME" -v "${VOLNAME}:${VOLPATH}" "drunner/baseimage-alpine" \
               /bin/bash -c "chown ${USERID}:root ${VOLPATH} && date >> ${VOLPATH}/install_date"
            docker rm "$DNAME" >/dev/null 
         fi
      done     
  fi
}


#------------------------------------------------------------------------------------

# recreateservice
# called by both install and SERVICE update.
function recreateservice {   
   # the directory that the container will update.
   [ -v SERVICENAME ] || die "SERVICENAME undefined."
   [ ! -d "${ROOTPATH}/services/${SERVICENAME}" ] || rm -rf "${ROOTPATH}/services/${SERVICENAME}" || die "Could not remove old ${SERVICENAME}."
   mkdir -p "${ROOTPATH}/services/${SERVICENAME}/drunner"

   # we need the user id for the account that the image uses.
   getUSERID "$IMAGENAME"
   if [ -z "$USERID" ] || [ "${USERID}" -eq 0 ]; then die "Internal error - USERID for image is not a normal user." ; fi

   # allow the container to write into this folder.
   chmod a+rwx "${ROOTPATH}/services/${SERVICENAME}/drunner" || die "Couldn't change owner of drunner service directory."
   #chown "${USERID}" "${ROOTPATH}/services/${SERVICENAME}/drunner"
   
   # assumes docker image does not use entrypoint. Could instead override entrypoint maybe.
   docker run --rm -it -v "${ROOTPATH}/services/${SERVICENAME}/drunner:/tempcopy" "${IMAGENAME}" /bin/bash -c "cp -r /drunner/* /tempcopy/"                             
   if [ $? -ne 0 ]; then 
      echo "Failed to copy files.">&2 
      echo "You will need to reinstall the service.">&2
      rm -rf "${SERVICEPATH}"
      exit 1
   fi  
   
   local DATESTAMP="$(TZ=Pacific/Auckland date +"%a, %d %b %Y %X")" 
   local HOSTIP=$(ip route get 1 | awk '{print $NF;exit}') 

   # loadServiceSilent gets the VOLUMES and related vars. We haven't finished creating it, so go silent!
   loadServiceSilent
   
   # convert arrays to a string format suitable for later source'ing.
   array2string "${DOCKERVOLS[@]:-}" ;       STR_DOCKERVOLS="$ARRAYSTR"
   array2string "${DOCKEROPTS[@]:-}" ;       STR_DOCKEROPTS="$ARRAYSTR"
   array2string "${VOLUMES[@]:-}" ;          STR_VOLUMES="$ARRAYSTR"
   array2string "${EXTRACONTAINERS[@]:-}" ;  STR_EXTRACONTAINERS="$ARRAYSTR"

   # copy over utils.sh (and any others). Need to use bash since bash expands the wildcards, not cp
   bash -c "cp -r ${ROOTPATH}/support/for_services_drunner/* ${ROOTPATH}/services/${SERVICENAME}/drunner/"

   # create variables.sh
   cat <<EOF >"${ROOTPATH}/services/${SERVICENAME}/drunner/variables.sh"
# Auto generated by dRunner
# ${DATESTAMP}
DOCKERVOLS=$STR_DOCKERVOLS
DOCKEROPTS=$STR_DOCKEROPTS
VOLUMES=$STR_VOLUMES
EXTRACONTAINERS=$STR_EXTRACONTAINERS
SERVICENAME="$SERVICENAME"
IMAGENAME="$IMAGENAME"
INSTALLTIME="$DATESTAMP"
HOSTIP="$HOSTIP"
EOF

   # Create imagename.sh
   cat <<EOF >"${ROOTPATH}/services/${SERVICENAME}/imagename.sh"
# Auto generated by dRunner
# ${DATESTAMP}
IMAGENAME="$IMAGENAME"
EOF

   # tidy up permissions
   docker run --rm -v "${ROOTPATH}/services/${SERVICENAME}:/s" drunner/baseimage-alpine bash -c "chown -R $EUID:${GROUPS[0]} /s ; chmod -R 0700 /s" || die "Couldn't change permissions for ${ROOTPATH}/services/${SERVICENAME}" 
}

#------------------------------------------------------------------------------------

# updateservice - udpates the service.
function updateservice {
   "${ROOTPATH}/services/${SERVICENAME}/drunner/servicerunner" updatestart || die "Update failed (${SERVICENAME}'s updatestart failed)."

   # ensure we have the latest support image. Issue here in that we don't update any other
   # images within the container.
   if [ "$PULLONUPDATE" -eq 1 ]; then
      docker pull "${IMAGENAME}"
      if [ "$?" -ne 0 ]; then die "Unable to pull required Docker image ${IMAGENAME}." ; fi
      
      # also pull any extra containers specified in the service's servicecfg.sh
      if [ -v EXTRACONTAINERS ]; then
         for CONTNAME in "${EXTRACONTAINERS[@]}"; do
            docker pull "${CONTNAME}"
            if [ "$?" -ne 0 ]; then die "Unable to pull required Docker image ${CONTNAME}." ; fi
         done
      fi
         
   fi
   recreateservice
   
   "${ROOTPATH}/services/${SERVICENAME}/drunner/servicerunner" updateend || die "Update failed (${SERVICENAME}'s updateend failed)."
   
   # validate
   "${ROOTPATH}/support/validator-service" "$SERVICENAME" || die "Update failed."
   
   echo "Updated ${SERVICENAME} from ${IMAGENAME}.">&2
   exit 0
}


#------------------------------------------------------------------------------------


# installservice
function installservice {   
   if [ -z "$IMAGENAME" ]; then die "install requires IMAGENAME." ; fi
   if [ -z "$SERVICENAME" ]; then die "install requires SERVICENAME." ; fi

   if [ -d "${ROOTPATH}/services/${SERVICENAME}" ]; then
      echo -e "${SERVICENAME} is already installed at ${ROOTPATH}/services/${SERVICENAME}. Initialisation cancelled.">&2
      echo -e "Try ${CODE_S}drunner update ${SERVICENAME}${CODE_E} instead.">&2
      exit 1
   fi

   (      
      set -e
            
      validate-image 
      recreateservice
      install_createlaunchscript
      install_createVolumes
         
      # Finally run the install script in the service.         
      "${ROOTPATH}/services/${SERVICENAME}/drunner/servicerunner" install
      
      # validate
      "${ROOTPATH}/support/validator-service" "$SERVICENAME" "NUKEOK"
   )
   if [ $? -ne 0 ]; then
      uninstallService
      die "Installation failed. ${CODE_E} System returned to clean state but all volumes preserved."
   fi
    
   # TODO: If we had errors then destroy everything!
   echo "Installation of service ${SERVICENAME} successful.">&2
   exit 0
}

#------------------------------------------------------------------------------------

