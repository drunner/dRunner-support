#!/bin/bash


#------------------------------------------------------------------------------------

# loadService
function loadService {
   if [ ! -v SERVICENAME ]; then die "loadService - SERVICENAME not defined." ; fi
   "${ROOTPATH}/support/validator-service" "$SERVICENAME"
   if [ $? -ne 0 ]; exit 1 ; fi

   source "${ROOTPATH}/services/${SERVICENAME}/drunner/service.cfg"
   source "${ROOTPATH}/services/${SERVICENAME}/_imagename"
   
   if [ -v VOLUMES ]; then
      for i in "${!VOLUMES[@]}"; do
         DOCKERVOLS[$((i))]="drunner-${SERVICENAME}-${VOLUMES[i]//[![:alnum:]]/}"
         DOCKEROPTS[$((2*i))]="-v"
         DOCKEROPTS[$((2*i+1))]="${DOCKERVOLS[i]}:${VOLUMES[i]}"
      done
   fi
}

#------------------------------------------------------------------------------------

# install_createlaunchscript
function install_createlaunchscript {
   local SCRIPTPATH="/usr/local/bin/${SERVICENAME}"
   cat <<EOF >"$SCRIPTPATH"
#!/bin/bash
drunner servicecmd ${SERVICENAME} "\$@"
EOF
   chmod a+x "$SCRIPTPATH"
}

#------------------------------------------------------------------------------------

# install_createVolumes
function install_createVolumes {
   # create the necessary volume containers.
   local DNAME="dr-install-volcreate"
   
   if [ -v VOLUMES ]; then
      for i in "${!DOCKERVOLS[@]}"; do      
         VOLNAME="${DOCKERVOLS[i]}"
         VOLPATH="${VOLUMES[i]}"

         if volexists "$VOLNAME" ; then 
            echo "A docker volume already exists for: $VOLNAME. Reusing it.";
         else
            docker volume create --name="$DNAME" >/dev/null
            # set permissions on config volume
            docker run --name="$DNAME" -v "${VOLNAME}:${VOLPATH}" "${COPYIMAGE}" \
               /bin/bash -c "chown ${USERID}:root ${VOLPATH} && date >> ${VOLPATH}/install_date"
            docker rm "$DNAME" >/dev/null 
         fi
      done     
  fi
}


#------------------------------------------------------------------------------------

# recreateservice
# called by both install and SERVICE update.
function recreateservice {   
   # the directory that the container will update.
   if [ ! -v SERVICENAME ]; then die "SERVICENAME undefined." ; fi
   if [ -d "${ROOTPATH}/services/${SERVICENAME}" ]; then rm -r "${ROOTPATH}/services/${SERVICENAME}" ; fi
   mkdir -p "${ROOTPATH}/services/${SERVICENAME}/drunner"

   # we need the user id for the account that the image uses.
   getUSERID "$IMAGENAME"
   if [ -z "$USERID" ] || [ "${USERID}" -eq 0 ]; then die "Internal error - USERID for image is not a normal user." ; fi

   # allow the container to write into this folder.
   chown "${USERID}" "${ROOTPATH}/services/${SERVICENAME}/drunner"
   
   # assumes docker image does not use entrypoint. Could instead override entrypoint maybe.
   docker run --rm -it -v "${ROOTPATH}/services/${SERVICENAME}/drunner:/tempcopy" "${IMAGENAME}" /bin/bash -c "cp -r /drunner/* /tempcopy/"                             
   if [ $? -ne 0 ]; then 
      echo "Failed to copy files.">&2 
      echo "You will need to reinstall the service.">&2
      rm -r "${SERVICEPATH}"
      exit 1
   fi  
   # tighten up permissions
   chown -R root:root "${ROOTPATH}/services/${SERVICENAME}/drunner"
   chmod -R a-w "${ROOTPATH}/services/${SERVICENAME}/drunner"
   
   # create _variables file for the service to read.
   loadService
   
   STR_DOCKERVOLS=""
   STR_DOCKEROPTS=""
   STR_VOLUMES=""
   STR_EXTRACONTAINERS=""
   
   local DATESTAMP="$(TZ=Pacific/Auckland date -u +"%a, %d %b %Y %X %z")"
   if [ -v DOCKERVOLS ]; then printf -v STR_DOCKERVOLS "\"%s\" " "${DOCKERVOLS[@]}" ; fi
   if [ -v DOCKEROPTS ]; then printf -v STR_DOCKEROPTS "\"%s\" " "${DOCKEROPTS[@]}" ; fi
   if [ -v VOLUMES ];    then printf -v STR_VOLUMES    "\"%s\" " "${VOLUMES[@]}"    ; fi
   if [ -v EXTRACONTAINERS ]; then printf -v STR_EXTRACONTAINERS "\"%s\" " "${EXTRACONTAINERS[@]}" ; fi
   cat <<EOF >"${SERVICEBINPATH}/_variables"
# Auto generated by Docker Runner
# ${DATESTAMP}
DOCKERVOLS=($STR_DOCKERVOLS)
DOCKEROPTS=($STR_DOCKEROPTS)
SERVICENAME="${SERVICENAME}"
IMAGENAME="${IMAGENAME}"
INSTALLTIME="${DATESTAMP}"
SUPPORTIMAGE="${SUPPORTIMAGE}"
EOF
}

#------------------------------------------------------------------------------------

# updateservice - udpates the service.
function updateservice {
   # ensure we have the latest support image. Issue here in that we don't update any other
   # images within the container.
   if [ "$PULLONUPDATE" -eq 1 ]; then
      docker pull "${IMAGENAME}"
      if [ "$?" -ne 0 ]; then die "Unable to pull required Docker image ${IMAGENAME}." ; fi
      
      # also pull any extra containers specified in the service's service.cfg.
      if [ -v EXTRACONTAINERS ]; then
         for CONTNAME in "${EXTRACONTAINERS[@]}"; do
            docker pull "${CONTNAME}"
            if [ "$?" -ne 0 ]; then die "Unable to pull required Docker image ${CONTNAME}." ; fi
         done
      fi
         
   fi
   recreateservice
   
   echo "Updated ${SERVICENAME} from ${IMAGENAME}.">&2
}


#------------------------------------------------------------------------------------


# installservice
function installservice {   
   if [ -z "$IMAGENAME" ]; then echo "install requires IMAGENAME.">&2 ; exit 1 ; fi
   if [ -z "$SERVICENAME" ]; then echo "install requires SERVICENAME.">&2 ; exit 1 ; fi

   if [ -d "${SERVICEPATH}" ]; then
      echo "A service is already installed at ${SERVICEPATH}. Initialisation cancelled.">&2
      echo "Try ${CODE_S}drunner ${SERVICENAME} update${CODE_E} instead.">&2
      exit 1
   fi
      
   validate-image 
   recreateservice
   install_createlaunchscript
   install_createVolumes
      
   # Finally run the install script in the service.         
   bash "${SERVICERUNNERPATH}" install
   
   
   # validate the installed service.
   bash "${ROOTPATH}/support/validator-service" "${SERVICENAME}"
   
   
   if [ $? -ne 0 ]; then
      destroy
      die "Installation failed. System returned to clean state."
   fi
    
   # TODO: If we had errors then destroy everything!
   echo "Installation of service ${SERVICENAME} successful."
}

#------------------------------------------------------------------------------------

