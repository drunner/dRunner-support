#!/bin/bash
set -o nounset

#          88  88888888ba                                                                  
#          88  88      "8b                                                                 
#          88  88      ,8P                                                                 
#  ,adPPYb,88  88aaaaaa8P'  88       88  8b,dPPYba,   8b,dPPYba,    ,adPPYba,  8b,dPPYba,  
# a8"    `Y88  88""""88'    88       88  88P'   `"8a  88P'   `"8a  a8P_____88  88P'   "Y8  
# 8b       88  88    `8b    88       88  88       88  88       88  8PP"""""""  88          
# "8a,   ,d88  88     `8b   "8a,   ,a88  88       88  88       88  "8b,   ,aa  88          
#  `"8bbdP"Y8  88      `8b   `"YbbdP'Y8  88       88  88       88   `"Ybbd8"'  88          
#                                                                                                                                                                           
#                                                                                                          
#  manage docker containers in a simple and consistent way.
#  
#  See:
#    https://github.com/j842/drunner
#
# ------------------------------------------------------------------


#------------------------------------------------------------------------------------

# Initialisation.

readonly MYDIR=$( dirname "$(readlink -f "$0")" )
if ! "${MYDIR}/validator-drunner" ; then exit 1 ; fi

source "/etc/drunner/drunner.cfg"
source "${ROOTPATH}/support/buildtime"
source "${ROOTPATH}/support/drunner-util-functions"
source "${ROOTPATH}/support/drunner-install-service"
source "${ROOTPATH}/support/drunner-backup-restore"

if [ "$EUID" -ne 0 ]; then echo "Please run as root" ; exit 1 ; fi
if ! command_exists docker ; then die "Requires docker to be installed." ; fi
if [ "$(uname -rv | grep -c Debian)" -eq 0 ]; then die "Built for Debian only." ; fi

#------------------------------------------------------------------------------------

# showservices
function showservices {
   # list available services. 
   echo "AVAILABLE SERVICES"
   find "$ROOTPATH/services" -maxdepth 1 -mindepth 1 -type d | while read SPATH; do 
      if [ -e "${SPATH}/_imagename" ]; then
         source "${SPATH}/_imagename"
         printf "   %-15s - %-55s\n" "${SPATH##*/}" "$IMAGENAME"
      else
         printf "   %-15s - %-55s\n" "${SPATH##*/}" "Broken service"
      fi
   done
   echo " "
}

#------------------------------------------------------------------------------------

# showusage
function showusage {
cat <<EOF >&2

NAME
   drunner - docker Runner

VERSION
   drunner:         ${DRUNNERINSTALLTIME}
   drunner-support: ${SUPPORTBUILDTIME}
   drunner-install: ${DRUNNERINSTALLURL}
   
SYNOPSIS
   drunner clean
   drunner list
   drunner update
   drunner checkimage IMAGENAME
   
   [PASS=?] drunner backup  SERVICENAME BACKUPFILE
   [PASS=?] drunner restore BACKUPFILE  SERVICENAME  
   
   drunner install IMAGENAME [SERVICENAME]
   drunner update  SERVICENAME
   drunner destroy SERVICENAME
   drunner enter   SERVICENAME [ARGS]
   
   SERVICENAME
   SERVICENAME COMMAND ARGS
   
DESCRIPTION
   Provides a standard way to manage and run containers supporting dr.
   Intended to be used both manually and via Ansible.
   See https://github.com/j842/drunner
   
EXIT CODE
   0   - success
   1   - error
   3   - no changes made
   
EOF
}

#------------------------------------------------------------------------------------

# updatedr - udpates docker runner.
function updatedr {
   # use the container to get the latest dr-install script.
   local TEMPDIR="$(mktemp -d)"
   echo "Downloading from $DRUNNERINSTALLURL"
   docker run -it --name="drunner-downloadfile" -v "${TEMPDIR}:/tempdir" "${SUPPORTIMAGE}" bash -c "wget --no-cache -nv -O /tempdir/drunner-install ${DRUNNERINSTALLURL}" >/dev/null
   local RVAL="$?"
   docker rm "drunner-downloadfile" >/dev/null 2>&1

   if [ "$RVAL" -ne 0 ]; then die "Unable to get drunner-install.">&2 ; fi
   if [ ! -e "${TEMPDIR}/drunner-install" ]; then die "drunner-install mysteriously missing.">&2 ; fi
   
   # run it to update the installation.
   bash "${TEMPDIR}/drunner-install"
   rm -r "${TEMPDIR}"
   
   # not safe to continue.
   exit 0
}


#------------------------------------------------------------------------------------


#------------------------------------------------------------------------------------

function showservicehelp {
   if [ -z $SERVICENAME ]; then die "Can't show service help when we don't know what service it is."; fi
   local SERVICERUNNER="${ROOTPATH}/services/${SERVICENAME}/drunner/servicerunner"

   if [ -e "$SERVICERUNNER" ]; then
      bash "${SERVICERUNNER}" help
      exit 0
   else
      showservices
      echo " ">&2
      die "Service ${SERVICENAME} is broken or does not exist."
   fi
}

#------------------------------------------------------------------------------------

# processServiceCommands COMMAND SERVICENAME [ARGS..]
function processServiceCommands {
   # all these commands have SERVICENAME as second argument.
   if [ "$#" -lt 2 ]; then
      showusage
      exit 0
   fi

   SERVICENAME="$2"
   loadService
      
   case "$1" in
      update)
         updateservice
         ;;
                  
      backup)
         if [ "$#" -eq 3 ]; then
            backup "$3"
         else
            dieusage "[PASS=?] drunner backup SERVICENAME BACKUPFILE"
         fi
         ;;
         
      enter)
         SCRIPTTORUN="${ROOTPATH}/services/${SERVICENAME}/drunner/servicerunner"
         shift 2 
         bash "${SCRIPTTORUN}" "enter" "$@"
         ;;
         
      # servicecmd SERVICENAME COMMAND
      servicecmd)
         local RESERVEDWORDS=("install" "backup" "restore" "destroy" "update" "enter")
         if [ "$#" -lt 3 ] || [ "$3" = "help" ]; then
            showservicehelp
         elif elementIn "$3" "${RESERVEDWORDS[@]}"; then 
            echo -e "$3 is a reserved word. Try ${CODE_S}drunner ${3} ${SERVICENAME}${CODE_E} instead.">&2
            exit 1
         else
            SCRIPTTORUN="${ROOTPATH}/services/${SERVICENAME}/drunner/servicerunner"
            SUBCOMMAND="$3"
            shift 3
            if [ -e "${SCRIPTTORUN}" ]; then
               bash "${SCRIPTTORUN}" "$SUBCOMMAND" "$@"
            else
               showservicehelp
            fi
         fi
         ;;

      *)
         showservicehelp
   esac     
}


#------------------------------------------------------------------------------------

# processdRunnerCommands ARGS
function processdRunnerCommands {
   # start with high level commands (clean, list, update), and commands on a service
   # that do not expect the service to be fully configured (install, restore, destroy)
   case "$1" in 
      clean)
         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock spotify/docker-gc
         exit 0
         ;;
         
      list)
         showservices
         exit 0
         ;;
         
      update)
         # if no args then update dr itself.
         if [ "$#" -eq 1 ]; then
            updatedr
            exit 0
         fi
         # otherwise fall through - we want to update a service not dr.
         ;;
         
      checkimage)
         [ "$#" -eq 2 ] || dieusage "drunner checkimage IMAGENAME"
         IMAGENAME="$2"
         validate-image
         exit 0
         ;;
         
      install)
         if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
            dieusage "drunner install IMAGENAME [SERVICENAME]"
         fi

         IMAGENAME="$2"
         if [ "$#" -eq 3 ]; then 
            SERVICENAME="$3" 
         else
            SERVICENAME="${IMAGENAME##*/}"
            SERVICENAME="${SERVICENAME%%:*}"
         fi

         installservice
         exit 0
         ;;

      restore)
         if [ "$#" -ne 3 ]; then
            dieusage "[PASS=?] drunner restore BACKUPFILE SERVICENAME  "
            exit 0
         fi
         SERVICENAME="$3"
         restore "$2"
         exit 0
         ;;

      destroy)
         if [ "$#" -ne 2 ]; then
            dieusage "[PASS=?] drunner destroy SERVICENAME"
            exit 0
         fi
         SERVICENAME="$2"
         destroy 
         exit 0
         ;;        
   esac  
}

#------------------------------------------------------------------------------------

# ███╗   ███╗ █████╗ ██╗███╗   ██╗
# ████╗ ████║██╔══██╗██║████╗  ██║
# ██╔████╔██║███████║██║██╔██╗ ██║
# ██║╚██╔╝██║██╔══██║██║██║╚██╗██║
# ██║ ╚═╝ ██║██║  ██║██║██║ ╚████║
# ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝

function main {                                

   if [ "$#" -eq 0 ]; then 
      showusage
      showservices
      exit 0
   fi
   
   # Process (clean, list, update, install, restore, destroy)
   # These ones don't require a valid service.
   processdRunnerCommands "$@"
   
   # everything from now on is expected to be based on a valid service
   processServiceCommands "$@"
}

#--------------------------------------------------------------------------
main "$@"
